import smartpy as sp
        
class StringOfBytes(sp.Contract):
  def __init__(self, metadata):
    self.init(
      metadata=metadata,
      bytes_to_string = {
        sp.bytes('0x00'): 'NUL',
        sp.bytes('0x01'): 'SOH',
        sp.bytes('0x02'): 'STX',
        sp.bytes('0x03'): 'ETX',
        sp.bytes('0x04'): 'EOT',
        sp.bytes('0x05'): 'ENQ',
        sp.bytes('0x06'): 'ACK',
        sp.bytes('0x07'): 'BEL',
        sp.bytes('0x08'): 'BS',
        sp.bytes('0x09'): 'HT',
        sp.bytes('0x0A'): 'LF',
        sp.bytes('0x0B'): 'VT',
        sp.bytes('0x0C'): 'FF',
        sp.bytes('0x0D'): 'CR',
        sp.bytes('0x0E'): 'SO',
        sp.bytes('0x0F'): 'SI',
        sp.bytes('0x10'): 'DLE',
        sp.bytes('0x11'): 'DC1',
        sp.bytes('0x12'): 'DC2',
        sp.bytes('0x13'): 'DC3',
        sp.bytes('0x14'): 'DC4',
        sp.bytes('0x15'): 'NAK',
        sp.bytes('0x16'): 'SYN',
        sp.bytes('0x17'): 'ETB',
        sp.bytes('0x18'): 'CAN',
        sp.bytes('0x19'): 'EM',
        sp.bytes('0x1A'): 'SUB',
        sp.bytes('0x1B'): 'ESC',
        sp.bytes('0x1C'): 'FS',
        sp.bytes('0x1D'): 'GS',
        sp.bytes('0x1E'): 'RS',
        sp.bytes('0x1F'): 'US',
        sp.bytes('0x20'): 'SP',
        sp.bytes('0x21'): '!',
        sp.bytes('0x22'): '\\"',
        sp.bytes('0x23'): '#',
        sp.bytes('0x24'): '$',
        sp.bytes('0x25'): '%',
        sp.bytes('0x26'): '&',
        sp.bytes('0x27'): "'",
        sp.bytes('0x28'): '(',
        sp.bytes('0x29'): ')',
        sp.bytes('0x2A'): '*',
        sp.bytes('0x2B'): '+',
        sp.bytes('0x2C'): ',',
        sp.bytes('0x2D'): '-',
        sp.bytes('0x2E'): '.',
        sp.bytes('0x2F'): '/',
        sp.bytes('0x30'): '0',
        sp.bytes('0x31'): '1',
        sp.bytes('0x32'): '2',
        sp.bytes('0x33'): '3',
        sp.bytes('0x34'): '4',
        sp.bytes('0x35'): '5',
        sp.bytes('0x36'): '6',
        sp.bytes('0x37'): '7',
        sp.bytes('0x38'): '8',
        sp.bytes('0x39'): '9',
        sp.bytes('0x3A'): ':',
        sp.bytes('0x3B'): ';',
        sp.bytes('0x3C'): '<',
        sp.bytes('0x3D'): '=',
        sp.bytes('0x3E'): '>',
        sp.bytes('0x3F'): '?',
        sp.bytes('0x40'): '@',
        sp.bytes('0x41'): 'A',
        sp.bytes('0x42'): 'B',
        sp.bytes('0x43'): 'C',
        sp.bytes('0x44'): 'D',
        sp.bytes('0x45'): 'E',
        sp.bytes('0x46'): 'F',
        sp.bytes('0x47'): 'G',
        sp.bytes('0x48'): 'H',
        sp.bytes('0x49'): 'I',
        sp.bytes('0x4A'): 'J',
        sp.bytes('0x4B'): 'K',
        sp.bytes('0x4C'): 'L',
        sp.bytes('0x4D'): 'M',
        sp.bytes('0x4E'): 'N',
        sp.bytes('0x4F'): 'O',
        sp.bytes('0x50'): 'P',
        sp.bytes('0x51'): 'Q',
        sp.bytes('0x52'): 'R',
        sp.bytes('0x53'): 'S',
        sp.bytes('0x54'): 'T',
        sp.bytes('0x55'): 'U',
        sp.bytes('0x56'): 'V',
        sp.bytes('0x57'): 'W',
        sp.bytes('0x58'): 'X',
        sp.bytes('0x59'): 'Y',
        sp.bytes('0x5A'): 'Z',
        sp.bytes('0x5B'): '[',
        sp.bytes('0x61'): 'a',
        sp.bytes('0x62'): 'b',
        sp.bytes('0x63'): 'c',
        sp.bytes('0x64'): 'd',
        sp.bytes('0x65'): 'e',
        sp.bytes('0x66'): 'f',
        sp.bytes('0x67'): 'g',
        sp.bytes('0x68'): 'h',
        sp.bytes('0x69'): 'i',
        sp.bytes('0x6A'): 'j',
        sp.bytes('0x6B'): 'k',
        sp.bytes('0x6C'): 'l',
        sp.bytes('0x6D'): 'm',
        sp.bytes('0x6E'): 'n',
        sp.bytes('0x6F'): 'o',
        sp.bytes('0x70'): 'p',
        sp.bytes('0x71'): 'q',
        sp.bytes('0x72'): 'r',
        sp.bytes('0x73'): 's',
        sp.bytes('0x74'): 't',
        sp.bytes('0x75'): 'u',
        sp.bytes('0x76'): 'v',
        sp.bytes('0x77'): 'w',
        sp.bytes('0x78'): 'x',
        sp.bytes('0x79'): 'y',
        sp.bytes('0x7A'): 'z',
        sp.bytes('0x7B'): '{',
        sp.bytes('0x7C'): '|',
        sp.bytes('0x7D'): '}',
        sp.bytes('0x7E'): '~',
        sp.bytes('0x7F'): 'DEL',
        sp.bytes('0x80'): '€',
        sp.bytes('0x82'): '‚',
        sp.bytes('0x83'): 'ƒ',
        sp.bytes('0x84'): '„',
        sp.bytes('0x85'): '…',
        sp.bytes('0x86'): '†',
        sp.bytes('0x87'): '‡',
        sp.bytes('0x88'): 'ˆ',
        sp.bytes('0x89'): '‰',
        sp.bytes('0x8A'): 'Š',
        sp.bytes('0x8B'): '‹',
        sp.bytes('0x8C'): 'Œ',
        sp.bytes('0x8D'): '',
        sp.bytes('0x8E'): 'Ž',
        sp.bytes('0x8F'): '',
        sp.bytes('0x90'): '',
        sp.bytes('0x91'): '‘',
        sp.bytes('0x92'): '’',
        sp.bytes('0x93'): '“',
        sp.bytes('0x94'): '”',
        sp.bytes('0x95'): '•',
        sp.bytes('0x96'): '–',
        sp.bytes('0x97'): '—',
        sp.bytes('0x98'): '˜',
        sp.bytes('0x99'): '™',
        sp.bytes('0x9A'): 'š',
        sp.bytes('0x9B'): '›',
        sp.bytes('0x9C'): 'œ',
        sp.bytes('0x9D'): '',
        sp.bytes('0x9E'): 'ž',
        sp.bytes('0x9F'): 'Ÿ',
        sp.bytes('0xA0'): 'NBSP',
        sp.bytes('0xA1'): '¡',
        sp.bytes('0xA2'): '¢',
        sp.bytes('0xA3'): '£',
        sp.bytes('0xA4'): '¤',
        sp.bytes('0xA5'): '¥',
        sp.bytes('0xA6'): '¦',
        sp.bytes('0xA7'): '§',
        sp.bytes('0xA8'): '¨',
        sp.bytes('0xA9'): '©',
        sp.bytes('0xAA'): 'ª',
        sp.bytes('0xAB'): '«',
        sp.bytes('0xAC'): '¬',
        sp.bytes('0xAD'): '­­',
        sp.bytes('0xAE'): '®',
        sp.bytes('0xAF'): '¯',
        sp.bytes('0xB0'): '°',
        sp.bytes('0xB1'): '±',
        sp.bytes('0xB2'): '²',
        sp.bytes('0xB3'): '³',
        sp.bytes('0xB4'): '´',
        sp.bytes('0xB5'): 'µ',
        sp.bytes('0xB6'): '¶',
        sp.bytes('0xB7'): '·',
        sp.bytes('0xB8'): '¸',
        sp.bytes('0xB9'): '¹',
        sp.bytes('0xBA'): 'º',
        sp.bytes('0xBB'): '»',
        sp.bytes('0xBC'): '¼',
        sp.bytes('0xBD'): '½',
        sp.bytes('0xBE'): '¾',
        sp.bytes('0xBF'): '¿',
        sp.bytes('0xC0'): 'À',
        sp.bytes('0xC1'): 'Á',
        sp.bytes('0xC2'): 'Â',
        sp.bytes('0xC3'): 'Ã',
        sp.bytes('0xC4'): 'Ä',
        sp.bytes('0xC5'): 'Å',
        sp.bytes('0xC6'): 'Æ',
        sp.bytes('0xC7'): 'Ç',
        sp.bytes('0xC8'): 'È',
        sp.bytes('0xC9'): 'É',
        sp.bytes('0xCA'): 'Ê',
        sp.bytes('0xCB'): 'Ë',
        sp.bytes('0xCC'): 'Ì',
        sp.bytes('0xCD'): 'Í',
        sp.bytes('0xCE'): 'Î',
        sp.bytes('0xCF'): 'Ï',
        sp.bytes('0xD0'): 'Ð',
        sp.bytes('0xD1'): 'Ñ',
        sp.bytes('0xD2'): 'Ò',
        sp.bytes('0xD3'): 'Ó',
        sp.bytes('0xD4'): 'Ô',
        sp.bytes('0xD5'): 'Õ',
        sp.bytes('0xD6'): 'Ö',
        sp.bytes('0xD7'): '×',
        sp.bytes('0xD8'): 'Ø',
        sp.bytes('0xD9'): 'Ù',
        sp.bytes('0xDA'): 'Ú',
        sp.bytes('0xDB'): 'Û',
        sp.bytes('0xDC'): 'Ü',
        sp.bytes('0xDD'): 'Ý',
        sp.bytes('0xDE'): 'Þ',
        sp.bytes('0xDF'): 'ß',
        sp.bytes('0xE0'): 'à',
        sp.bytes('0xE1'): 'á',
        sp.bytes('0xE2'): 'â',
        sp.bytes('0xE3'): 'ã',
        sp.bytes('0xE4'): 'ä',
        sp.bytes('0xE5'): 'å',
        sp.bytes('0xE6'): 'æ',
        sp.bytes('0xE7'): 'ç',
        sp.bytes('0xE8'): 'è',
        sp.bytes('0xE9'): 'é',
        sp.bytes('0xEA'): 'ê',
        sp.bytes('0xEB'): 'ë',
        sp.bytes('0xEC'): 'ì',
        sp.bytes('0xED'): 'í',
        sp.bytes('0xEE'): 'î',
        sp.bytes('0xEF'): 'ï',
        sp.bytes('0xF0'): 'ð',
        sp.bytes('0xF1'): 'ñ',
        sp.bytes('0xF2'): 'ò',
        sp.bytes('0xF3'): 'ó',
        sp.bytes('0xF4'): 'ô',
        sp.bytes('0xF5'): 'õ',
        sp.bytes('0xF6'): 'ö',
        sp.bytes('0xF7'): '÷',
        sp.bytes('0xF8'): 'ø',
        sp.bytes('0xF9'): 'ù',
        sp.bytes('0xFA'): 'ú',
        sp.bytes('0xFB'): 'û',
        sp.bytes('0xFC'): 'ü',
        sp.bytes('0xFD'): 'ý',
        sp.bytes('0xFE'): 'þ',
        sp.bytes('0xFF'): 'ÿ',
      }
    )

  ## Helper functions
  #

  def bytes_to_string(self, hash_bytes):
    sp.set_type(hash_bytes, sp.TBytes)
    _hash = sp.local('_hash', hash_bytes)
    res = sp.local('res', '')
    index = sp.local('index', 0)
    hash_len = sp.local('hash_len', sp.len(_hash.value))
    sp.while index.value < hash_len.value:
      res.value += (self.data.bytes_to_string[sp.slice(_hash.value, index.value, 1).open_some()])
      index.value = index.value + 1
    return res.value

  ## Views
  #

  @sp.onchain_view()
  def get_string_from_bytes(self, params):
    sp.set_type(params, sp.TBytes)
    res = self.bytes_to_string(params)
    sp.trace(res)
    sp.result(res)

